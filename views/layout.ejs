<!DOCTYPE html>
<html ng-app="upnowApp">
  <head>
    <title><%=typeof title == 'undefined' ? 'New Sails App' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/bower_components/bootstrap/dist/css/bootstrap.css">
    <!--STYLES END-->

    <link href='http://fonts.googleapis.com/css?family=Open+Sans:400italic,600' rel='stylesheet' type='text/css'>
    <link href="https://fonts.googleapis.com/css?family=Indie+Flower" rel="stylesheet">
    <style type="text/css">
      .logo{
        font-family: 'Indie Flower', cursive;
        font-weight: bold;
        font-size:32px;
        line-height: 1em;
        /*text-shadow: 1px 1px 0px white,2px 2px 0px black;    */
      }

      .navbar-default .navbar-brand{
        color:#337ab7;
      }
    </style>

  </head>

  <body>



<nav class="navbar navbar-default navbar-fixed-top">
    <div class="container">
      <!-- logo -->
      <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <i class="icon-menu"></i> Menu
        </button>
        <a class="navbar-brand logo" href="/">UP now?</a>
      </div>
      <!-- end logo-->

      <!-- login/logut links -->
      <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar">
          <% if (req.session.me) {%>
            <li>
              <a href="/sites">Sites</a>
            </li>
            <li>
              <a href="/sites">Users</a>
            </li>
          <% } %>
        </ul>
        <ul class="nav navbar-nav navbar-right">
          
            <% if (req.session.me) {%>
            <li>
              <a href=""><%= req.session.me.name %></a>
            </li>
            <li>
              <a href="/logout">Log out</a>
            </li>
            <% } else { %>
            <li>
              <a href="/login">Log in</a>
            </li>
            <li>
              <a href="/signup">Signup</a>
            </li>
            <% }%>
          
        </ul>
      </div>
      <!-- end login/logut links -->

    </div>
  </nav>    
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/bower_components/jquery/dist/jquery.js"></script>
    <script src="/bower_components/angular/angular.js"></script>
    <script src="/bower_components/angular-route/angular-route.js"></script>
    <script src="/js/upnowApp.js"></script>
    <script src="/js/controllers/home.js"></script>
    <script src="/js/controllers/site.js"></script>
    <script src="/js/controllers/user.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
